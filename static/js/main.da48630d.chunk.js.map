{"version":3,"sources":["TodoForm.jsx","TodoItem.jsx","TodoList.jsx","TodoApp.jsx","LocalStorage.js","serviceWorkerRegistration.js","index.jsx"],"names":["TodoForm","props","state","inputValue","event","this","onSubmit","preventDefault","setState","target","value","placeholder","buttonLabel","e","handleClick","type","onChange","inputChanged","React","Component","defaultProps","TodoItem","todoItem","onCompletedChange","onDelete","className","completed","defaultChecked","onClick","checked","readOnly","text","TodoList","todoItems","map","id","TodoApp","storage","all","update","save","delete","changeCompleted","todoItemText","addTodoItem","LocalStorage","nextId","parseInt","getItem","Math","max","item","newTodoItems","setItem","JSON","stringify","parse","oldItem","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","localStorage","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.da48630d.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n    };\n  }\n\n  handleClick(event) {\n    const { inputValue } = this.state;\n    const { onSubmit } = this.props;\n\n    event.preventDefault();\n\n    onSubmit(inputValue);\n    this.setState({ inputValue: '' });\n  }\n\n  inputChanged(event) {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  }\n\n  render() {\n    const { inputValue } = this.state;\n    const { placeholder, buttonLabel } = this.props;\n    return (\n      <form onSubmit={(e) => this.handleClick(e)}>\n        <input\n          type=\"text\"\n          placeholder={placeholder}\n          onChange={(e) => this.inputChanged(e)}\n          value={inputValue}\n        />\n        <button type=\"submit\">{buttonLabel}</button>\n      </form>\n    );\n  }\n}\n\nTodoForm.defaultProps = {\n  placeholder: 'Buy some milk',\n  buttonLabel: 'Add',\n};\n\nexport default TodoForm;\n","import React from 'react';\n\nfunction TodoItem({ todoItem, onCompletedChange, onDelete }) {\n  const className = todoItem.completed ? 'completed' : '';\n\n  const handleClick = (event) => {\n    onCompletedChange(event.target.checked);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        defaultChecked={todoItem.completed}\n        onClick={handleClick}\n        readOnly\n      />\n      <span className={className}>{todoItem.text}</span>\n      <button type=\"submit\" className=\"link\" onClick={onDelete}>\n        delete\n      </button>\n    </div>\n  );\n}\n\nexport default TodoItem;\n","import React from 'react';\n\nimport TodoItem from './TodoItem';\n\nfunction TodoList({ todoItems, onCompletedChange, onDelete }) {\n  return (\n    <div>\n      {todoItems.map((todoItem) => (\n        <TodoItem\n          key={todoItem.id}\n          todoItem={todoItem}\n          onCompletedChange={(completed) => onCompletedChange(todoItem, completed)}\n          onDelete={() => onDelete(todoItem)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React from 'react';\n\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\n\nimport './index.css';\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoItems: [],\n    };\n  }\n\n  componentDidMount() {\n    const { storage } = this.props;\n\n    this.setState({\n      todoItems: storage.all(),\n    });\n  }\n\n  changeCompleted(todoItem, completed) {\n    const { storage } = this.props;\n\n    storage.update({ ...todoItem, completed });\n\n    this.setState({\n      todoItems: storage.all(),\n    });\n  }\n\n  addTodoItem(text) {\n    const { storage } = this.props;\n\n    const todoItem = { text, completed: false };\n    storage.save(todoItem);\n\n    this.setState({\n      todoItems: storage.all(),\n    });\n  }\n\n  delete(todoItem) {\n    const { storage } = this.props;\n\n    storage.delete(todoItem);\n\n    this.setState({\n      todoItems: storage.all(),\n    });\n  }\n\n  render() {\n    const { todoItems } = this.state;\n    return (\n      <div>\n        <TodoList\n          todoItems={todoItems}\n          onCompletedChange={(todoItem, completed) => this.changeCompleted(todoItem, completed)}\n          onDelete={(todoItem) => this.delete(todoItem)}\n        />\n        <TodoForm\n          onSubmit={(todoItemText) => this.addTodoItem(todoItemText)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TodoApp;\n","class LocalStorage {\n  constructor(storage) {\n    this.storage = storage;\n  }\n\n  save(todoItem) {\n    const todoItems = this.all();\n    const nextId = parseInt(this.storage.getItem('todoItemNextId'), 10)\n        || Math.max(0, ...todoItems.map((item) => item.id));\n\n    const newTodoItems = [\n      ...todoItems,\n      { completed: false, ...todoItem, id: nextId + 1 },\n    ];\n\n    this.storage.setItem('todoItemNextId', nextId + 1);\n    this.storage.setItem('todoItems', JSON.stringify(newTodoItems));\n  }\n\n  all() {\n    return JSON.parse(this.storage.getItem('todoItems')) || [];\n  }\n\n  update(todoItem) {\n    const newTodoItems = this.all().map((oldItem) => {\n      if (oldItem.id !== todoItem.id) {\n        return oldItem;\n      }\n\n      return { ...oldItem, ...todoItem };\n    });\n\n    this.storage.setItem('todoItems', JSON.stringify(newTodoItems));\n  }\n\n  delete(todoItem) {\n    const todoItems = this.all();\n\n    const newTodoItems = todoItems.filter((oldItem) => oldItem.id !== todoItem.id);\n\n    this.storage.setItem('todoItems', JSON.stringify(newTodoItems));\n  }\n}\n\nexport default LocalStorage;\n","/* eslint-disable no-console, no-param-reassign, no-use-before-define */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport TodoApp from './TodoApp';\n\nimport LocalStorage from './LocalStorage';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoApp storage={new LocalStorage(window.localStorage)} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}